V/** @jsx React.DOM */\u000a\u000aMR.RadarPage = React.createClass({displayName: 'RadarPage',\u000a  getInitialState: function(){\u000a    var radar = new MR.Radar({\u000a      name: '\u5fc3\u667a\u96f7\u9054',\u000a      weight: 1,\u000a    });\u000a    _sam_radar = radar;\u000a    return {\u000a      radar: radar,\u000a      selectRadar: radar\u000a    };\u000a  },\u000a  handleSelect: function(radar){\u000a    this.setState({selectRadar: radar});\u000a  },\u000a  // componentDidMount: function(){\u000a  //   ;\u000a  // },\u000a  render: function(){\u000a    return (\u000a      React.createElement("table", null, \u000a        React.createElement("tr", null, \u000a          React.createElement("td", null, \u000a            React.createElement(MR.RadarCanvasBox, {ref: "radar_box", height: SH, width: SW, radar: this.state.radar, onSelect: this.handleSelect})\u000a          ), \u000a          React.createElement("td", null, \u000a            React.createElement(MR.RadarInfoBox, {radar: this.state.selectRadar})\u000a          )\u000a        )\u000a      )\u000a    );\u000a  }\u000a});\u000a\u000a\u000aMR.RadarCanvasBox = React.createClass({displayName: 'RadarCanvasBox',\u000a  getInitialState: function(){\u000a    return {\u000a      fps: 0,\u000a      r: 50,\u000a      mouseR: 0,\u000a      mouseAg: 0,\u000a      mouseHovorRadar: null\u000a    };\u000a  },\u000a  ctxRender: function(ctx){\u000a    var that = this, tep1 = performance.now(), tep2, fps = 0, _render = function(){\u000a      // fps\u000a      fps += 1;\u000a      tep2 = performance.now();\u000a      if(tep2-tep1 >= 1000){\u000a        that.setState({fps:fps});\u000a        fps = 0;\u000a        tep1 = tep2;\u000a      }\u000a      // Render Radar\u000a      that.props.radar.update();\u000a      ctx.clearRect(0, 0, that.props.width, that.props.height);\u000a      that.props.radar.render(ctx, that.props.width/2, that.props.height/2, that.state.r, 0, that.state.mouseHovorRadar);\u000a\u000a      // Drow mouse line\u000a      that.drowMouseLine(ctx, that.props.width/2, that.props.height/2, that.state.mouseR, that.state.mouseAg);\u000a\u000a      // Animate Loop\u000a      window.requestAnimationFrame(_render);\u000a    };\u000a    _render();\u000a  },\u000a  drowMouseLine: function(ctx, x, y, r, ag){\u000a    ctx.beginPath();\u000a    ctx.moveTo(x, y);\u000a    ctx.lineTo(x+r*Math.cos(ag), y+r*Math.sin(ag));\u000a    ctx.stroke();\u000a  },\u000a  handleMouseMove: function(e){\u000a    var offset = React.findDOMNode(this.refs.canvas).getBoundingClientRect(),\u000a        x = e.clientX - offset.left,\u000a        y = e.clientY - offset.top,\u000a        midx = this.props.width/2,\u000a        midy = this.props.height/2,\u000a        mouseR = Math.sqrt((x-midx)*(x-midx)+(y-midy)*(y-midy)),\u000a        mouseAg = MR.Radar.tan3((y-midy), (x-midx));\u000a        that = this,\u000a        _chekc = function(radar, offsetR){\u000a          var r = offsetR + that.state.r;\u000a          if(mouseR>=offsetR&&mouseR<=r&&radar.startAg<=mouseAg&&mouseAg<=radar.endAg){\u000a            if(that.state.mouseHovorRadar !== radar){\u000a              that.setState({mouseHovorRadar: radar});\u000a            }\u000a            return true;\u000a          }else{\u000a            for(var i in radar.children){\u000a              if(_chekc(radar.children[i], r))return true;\u000a            }\u000a          }\u000a          return false;\u000a        };\u000a    this.setState({mouseR: mouseR, mouseAg:mouseAg});\u000a    if(!_chekc(this.props.radar,0))this.setState({mouseHovorRadar: null});\u000a  },\u000a  handleClick: function(e){\u000a    if(this.state.mouseHovorRadar){\u000a      this.props.onSelect(this.state.mouseHovorRadar);\u000a    }\u000a  },\u000a  handleScaling: function(v){\u000a    var that = this;\u000a    return function(e){\u000a      var r = that.state.r;\u000a      if(v&&r<300)r*=1.5;\u000a      else if(!v&&r>10)r/=1.5;\u000a      that.setState({r: r});\u000a    };\u000a  },\u000a  componentDidMount: function(){\u000a    var canvas = React.findDOMNode(this.refs.canvas);\u000a    canvas.width  = this.props.width;\u000a    canvas.height = this.props.height;\u000a    var ctx = canvas.getContext('2d');\u000a    this.ctxRender(ctx);\u000a  },\u000a  render: function(){\u000a    return (\u000a      React.createElement("div", null, \u000a        React.createElement("div", null, "fps: ", this.state.fps, "/s"), \u000a        React.createElement("div", null, \u000a          React.createElement("button", {onClick: this.handleScaling(0)}, "\u7e2e\u5c0f"), \u000a          React.createElement("button", {onClick: this.handleScaling(1)}, "\u653e\u5927")\u000a        ), \u000a        React.createElement("canvas", {ref: "canvas", onMouseMove: this.handleMouseMove, onClick: this.handleClick})\u000a      )\u000a    );\u000a  }\u000a});\u000a\u000a\u000aMR.RadarInfoBox = React.createClass({displayName: 'RadarInfoBox',\u000a  mixins: [React.addons.LinkedStateMixin],\u000a  getInitialState: function(){\u000a    return {\u000a      childName: '',\u000a    };\u000a  },\u000a  handleSubmit: function(e){\u000a    e.preventDefault();\u000a    e.stopPropagation();\u000a    this.props.radar.appendChild(new MR.Radar({\u000a      name: this.state.childName,\u000a      weight: 1,\u000a    }));\u000a  },\u000a  render: function(){\u000a    return (\u000a      React.createElement("div", null, \u000a        React.createElement("h2", null, this.props.radar.name), \u000a        React.createElement("form", {onSubmit: this.handleSubmit}, \u000a          React.createElement("div", null, "\u65b9\u584a\u540d\u7a31\uff1a"), \u000a          React.createElement("input", {valueLink: this.linkState('childName')}), \u000a          React.createElement("input", {type: "submit", value: "\u589e\u52a0\u65b0\u65b9\u584a"})\u000a        )\u000a      )\u000a    );\u000a  }\u000a});\u000a
p1
.